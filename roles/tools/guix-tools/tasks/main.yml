---
- name: Check if system Guix is available (APT)
  command: "{{ guix_tools_system_binary }} --version"
  register: guix_system_check
  failed_when: false
  changed_when: false

- name: Check if user Guix is available (compiled)
  command: "{{ guix_tools_user_binary }} --version"
  register: guix_user_check
  failed_when: false
  changed_when: false

- name: Set user Guix as preferred
  set_fact:
    guix_binary: "{{ guix_tools_user_binary }}"
    guix_installation_type: "user"
  when: guix_user_check.rc == 0 and install_user_guix | default(true)

- name: Set system Guix as preferred when user Guix disabled
  set_fact:
    guix_binary: "{{ guix_tools_system_binary }}"
    guix_installation_type: "system"
    guix_tools_profile: "{{ ansible_env.HOME }}/.guix-profile"
  when: guix_system_check.rc == 0 and not (install_user_guix | default(true))

- name: Set system Guix as fallback
  set_fact:
    guix_binary: "{{ guix_tools_system_binary }}"
    guix_installation_type: "system"
    guix_tools_profile: "{{ ansible_env.HOME }}/.guix-profile"
  when: guix_user_check.rc != 0 and guix_system_check.rc == 0

- name: Set no Guix available
  set_fact:
    guix_binary: ""
    guix_installation_type: "none"
  when: guix_user_check.rc != 0 and guix_system_check.rc != 0

- name: Debug Guix detection
  debug:
    msg: |
      Guix detection results:
      - System Guix ({{ guix_tools_system_binary }}): {{ 'available' if guix_system_check.rc == 0 else 'not available' }}
      - User Guix ({{ guix_tools_user_binary }}): {{ 'available' if guix_user_check.rc == 0 else 'not available' }}
      - Using: {{ guix_binary if guix_binary else 'none found' }} ({{ guix_installation_type }})

- name: Fail if no Guix is available
  fail:
    msg: |
      No Guix installation found. Please install Guix using one of these methods:
      1. System-wide via APT: sudo apt install guix
      2. User-level latest: Set install_user_guix: true or guix_installation_method: 'user'
  when: guix_installation_type == 'none'

- name: Compute tools to install via Guix (hybrid mode)
  set_fact:
    guix_tools_to_install: >-
      {{
        guix_tools_available | dict2items |
        selectattr('key', 'in', tool_installation_config.keys()) |
        selectattr('key', 'in', 
          (tool_installation_config | dict2items | 
           selectattr('value.method', 'equalto', 'guix') | 
           map(attribute='key') | list)) |
        map(attribute='value') | list
      }}
  when: tool_installation_method == 'hybrid'

- name: Compute tools to install via Guix (pure guix mode)
  set_fact:
    guix_tools_to_install: >-
      {{ guix_tools_available | dict2items | map(attribute='value') | list }}
  when: tool_installation_method == 'guix'

- name: Set empty tool list for individual mode
  set_fact:
    guix_tools_to_install: []
  when: tool_installation_method == 'individual'

- name: Debug - Show computed Guix packages
  debug:
    msg: |
      Installation method: {{ tool_installation_method }}
      Available tools: {{ guix_tools_available.keys() | list }}
      Config keys: {{ tool_installation_config.keys() | list if tool_installation_method == 'hybrid' else 'N/A' }}
      Guix tools: {{ (tool_installation_config | dict2items | selectattr('value.method', 'equalto', 'guix') | map(attribute='key') | list) if tool_installation_method == 'hybrid' else 'N/A' }}
      Tools to install: {{ guix_tools_to_install | default([]) | map(attribute='package_name') | list }}

- name: Check which tools are already installed
  shell: |
    export GUIX_PROFILE="{{ guix_tools_profile }}"
    if [ -f "$GUIX_PROFILE/etc/profile" ]; then
        . "$GUIX_PROFILE/etc/profile"
    fi
    {{ guix_binary }} package --list-installed | grep -q "^{{ item.package_name }}"
  register: guix_tool_installed
  failed_when: false
  changed_when: false
  environment:
    PATH: "/usr/bin:/bin:/usr/sbin:/sbin"
    HOME: "{{ ansible_env.HOME }}"
  loop: "{{ guix_tools_to_install }}"
  loop_control:
    label: "{{ item.package_name }}"
  when: guix_tools_to_install | length > 0

- name: Install tools via Guix
  shell: |
    {{ guix_binary }} install {{ item.item.package_name }}
  loop: "{{ guix_tool_installed.results | default([]) }}"
  loop_control:
    label: "{{ item.item.package_name }}"
  when: 
    - item.rc != 0
    - guix_tools_to_install | length > 0
  register: guix_install_result

- name: Install development packages via Guix
  shell: |
    export GUIX_PROFILE="{{ guix_tools_profile }}"
    if [ -f "$GUIX_PROFILE/etc/profile" ]; then
        . "$GUIX_PROFILE/etc/profile"
    fi
    {{ guix_binary }} install {{ guix_tools_dev_packages | join(' ') }}
  environment:
    PATH: "{{ guix_tools_profile }}/bin:{{ ansible_env.PATH }}"
  when: guix_tools_install_dev

- name: Configure Guix profile in zsh
  blockinfile:
    path: "{{ ansible_env.HOME }}/.config/zsh/.zshrc"
    marker: "# {mark} ANSIBLE MANAGED BLOCK - Guix Tools Profile"
    block: |
      # Guix tools profile setup (packages installed by user)
      export GUIX_PROFILE="{{ guix_tools_profile }}"
      if [ -f "$GUIX_PROFILE/etc/profile" ]; then
          . "$GUIX_PROFILE/etc/profile"
      fi
    create: yes
  when: guix_tools_to_install | length > 0

- name: Configure Guix profile in bashrc
  blockinfile:
    path: "{{ ansible_env.HOME }}/.bashrc"
    marker: "# {mark} ANSIBLE MANAGED BLOCK - Guix Tools Profile"
    block: |
      # Guix tools profile setup (packages installed by user)
      export GUIX_PROFILE="{{ guix_tools_profile }}"
      if [ -f "$GUIX_PROFILE/etc/profile" ]; then
          . "$GUIX_PROFILE/etc/profile"
      fi
    create: yes
  when: guix_tools_to_install | length > 0

- name: Configure mu4e in Spacemacs for Guix installation
  replace:
    path: "{{ ansible_env.HOME }}/.spacemacs"
    regexp: 'mu4e-installation-path "[^"]*"'
    replace: 'mu4e-installation-path "{{ guix_tools_profile }}/share/emacs/site-lisp/mu4e/"'
  when: 
    - guix_tools_to_install | selectattr('package_name', 'equalto', 'mu') | list | length > 0
    - "(ansible_env.HOME + '/.spacemacs') is file"

- name: Update mu4e mu-home path for Guix in Spacemacs
  replace:
    path: "{{ ansible_env.HOME }}/.spacemacs"
    regexp: 'mu4e-mu-home "[^"]*"'
    replace: 'mu4e-mu-home "{{ ansible_env.HOME }}/.local/share/mu"'
  when: 
    - guix_tools_to_install | selectattr('package_name', 'equalto', 'mu') | list | length > 0
    - "(ansible_env.HOME + '/.spacemacs') is file"

- name: Verify tool installations
  block:
    - name: Check fzf installation
      shell: |
        export GUIX_PROFILE="{{ guix_tools_profile }}"
        if [ -f "$GUIX_PROFILE/etc/profile" ]; then
            . "$GUIX_PROFILE/etc/profile"
        fi
        fzf --version
      register: fzf_verify
      environment:
        PATH: "{{ guix_tools_profile }}/bin:{{ ansible_env.PATH }}"
      changed_when: false

    - name: Check zoxide installation  
      shell: |
        export GUIX_PROFILE="{{ guix_tools_profile }}"
        if [ -f "$GUIX_PROFILE/etc/profile" ]; then
            . "$GUIX_PROFILE/etc/profile"
        fi
        zoxide --version
      register: zoxide_verify
      environment:
        PATH: "{{ guix_tools_profile }}/bin:{{ ansible_env.PATH }}"
      changed_when: false

    - name: Check ripgrep installation
      shell: |
        export GUIX_PROFILE="{{ guix_tools_profile }}"
        if [ -f "$GUIX_PROFILE/etc/profile" ]; then
            . "$GUIX_PROFILE/etc/profile"
        fi
        rg --version
      register: ripgrep_verify
      environment:
        PATH: "{{ guix_tools_profile }}/bin:{{ ansible_env.PATH }}"
      changed_when: false

    - name: Check rust installation
      shell: |
        export GUIX_PROFILE="{{ guix_tools_profile }}"
        if [ -f "$GUIX_PROFILE/etc/profile" ]; then
            . "$GUIX_PROFILE/etc/profile"
        fi
        rustc --version
      register: rust_verify
      environment:
        PATH: "{{ guix_tools_profile }}/bin:{{ ansible_env.PATH }}"
      changed_when: false

    - name: Check greenclip installation
      shell: |
        export GUIX_PROFILE="{{ guix_tools_profile }}"
        if [ -f "$GUIX_PROFILE/etc/profile" ]; then
            . "$GUIX_PROFILE/etc/profile"
        fi
        greenclip --version
      register: greenclip_verify
      environment:
        PATH: "{{ guix_tools_profile }}/bin:{{ ansible_env.PATH }}"
      changed_when: false
      failed_when: false  # greenclip might not have --version

    - name: Check rbw installation
      shell: |
        export GUIX_PROFILE="{{ guix_tools_profile }}"
        if [ -f "$GUIX_PROFILE/etc/profile" ]; then
            . "$GUIX_PROFILE/etc/profile"
        fi
        rbw --version
      register: rbw_verify
      environment:
        PATH: "{{ guix_tools_profile }}/bin:{{ ansible_env.PATH }}"
      changed_when: false

    - name: Check mu installation
      shell: |
        export GUIX_PROFILE="{{ guix_tools_profile }}"
        if [ -f "$GUIX_PROFILE/etc/profile" ]; then
            . "$GUIX_PROFILE/etc/profile"
        fi
        mu --version
      register: mu_verify
      environment:
        PATH: "{{ guix_tools_profile }}/bin:{{ ansible_env.PATH }}"
      changed_when: false
      when: guix_tools_to_install | selectattr('package_name', 'equalto', 'mu') | list | length > 0

  when: guix_tools_verify

- name: Create mu database directory
  file:
    path: "{{ ansible_env.HOME }}/.local/share/mu"
    state: directory
    mode: '0755'
  when: 
    - guix_tools_to_install | selectattr('package_name', 'equalto', 'mu') | list | length > 0

- name: Display installation results
  debug:
    msg: |
      Guix Tools Installation Summary:
      - fzf: {{ (fzf_verify.stdout_lines[0] if fzf_verify.stdout_lines|length > 0 else 'Output empty') if fzf_verify is defined and fzf_verify.rc == 0 else 'Not verified' }}
      - zoxide: {{ (zoxide_verify.stdout_lines[0] if zoxide_verify.stdout_lines|length > 0 else 'Output empty') if zoxide_verify is defined and zoxide_verify.rc == 0 else 'Not verified' }}  
      - ripgrep: {{ (ripgrep_verify.stdout_lines[0] if ripgrep_verify.stdout_lines|length > 0 else 'Output empty') if ripgrep_verify is defined and ripgrep_verify.rc == 0 else 'Not verified' }}
      - rust: {{ (rust_verify.stdout_lines[0] if rust_verify.stdout_lines|length > 0 else 'Output empty') if rust_verify is defined and rust_verify.rc == 0 else 'Not verified' }}
      - greenclip: {{ 'Installed' if greenclip_verify is defined else 'Not verified' }}
      - rbw: {{ (rbw_verify.stdout_lines[0] if rbw_verify.stdout_lines|length > 0 else 'Output empty') if rbw_verify is defined and rbw_verify.rc == 0 else 'Not verified' }}
      - mu: {{ (mu_verify.stdout_lines[0] if mu_verify.stdout_lines|length > 0 else 'Output empty') if mu_verify is defined and mu_verify.rc == 0 else 'Not verified' }}
  when: guix_tools_verify

- name: Show replaced roles information
  debug:
    msg: |
      The following individual Ansible roles are now replaced by this guix-tools role:
      {% for tool in guix_tools_to_install %}
      {% if tool.replaces_role != 'none' %}
      - {{ tool.package_name }}: {{ tool.replaces_role }} ({{ tool.description }})
      {% endif %}
      {% endfor %}
      
      Installation method: {{ tool_installation_method }}
      {% if tool_installation_method == 'hybrid' %}
      Per-tool configuration:
      {% for tool_name, config in tool_installation_config.items() %}
      - {{ tool_name }}: {{ config.method }} ({{ config.reason }})
      {% endfor %}
      {% endif %}