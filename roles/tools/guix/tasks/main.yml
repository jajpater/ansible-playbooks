---
- name: Ensure required directories exist
  file:
    path: "{{ item }}"
    state: directory
    mode: "0755"
  loop:
    - "{{ ansible_env.HOME }}/.local/src"
    - "{{ ansible_env.HOME }}/.config/guix"
    - "{{ ansible_env.HOME }}/.local/bin"
  when: install_user_guix or guix_installation_method == 'user'

- name: Check if user Guix is already bootstrapped
  stat:
    path: "{{ guix_current_bin }}"
  register: guix_user_current
  when: install_user_guix or guix_installation_method == 'user'

- name: Debug Guix bootstrap check
  debug:
    msg: |
      User Guix bootstrap check:
      - Current Guix path: {{ guix_current_bin }}
      - User Guix exists: {{ guix_user_current.stat.exists }}
      - Local repo path: {{ guix_local_repo }}
  when: install_user_guix or guix_installation_method == 'user'

- name: Bootstrap user-level Guix from local clone
  block:
    - name: Clone Guix repository locally (with fallback)
      shell: |
        if ! git clone --depth=50 {{ guix_primary_repo_url }} {{ guix_local_repo }}; then
          echo "Primary repo failed, trying fallback..."
          git clone --depth=50 {{ guix_fallback_repo_url }} {{ guix_local_repo }}
        fi
      args:
        creates: "{{ guix_local_repo }}/.git"

    - name: Bootstrap Guix from local repository
      shell: |
        export PATH="/usr/bin:{{ ansible_env.PATH }}"
        guix pull --url=file://{{ guix_local_repo }}
      args:
        creates: "{{ guix_current_bin }}"
      environment:
        GUIX_LOCPATH: ""
      register: guix_pull_result
      failed_when: false

    - name: Display Guix pull output if failed
      debug:
        msg: |
          Guix pull output:
          stdout: {{ guix_pull_result.stdout }}
          stderr: {{ guix_pull_result.stderr }}
          return code: {{ guix_pull_result.rc }}
      when: guix_pull_result.rc != 0

    - name: Fail if Guix pull was unsuccessful
      fail:
        msg: "Guix pull failed with return code {{ guix_pull_result.rc }}"
      when: guix_pull_result.rc != 0

  when: (install_user_guix or guix_installation_method == 'user') and not guix_user_current.stat.exists

- name: Configure shell environments for user Guix
  include_tasks: configure_shells.yml
  when: install_user_guix or guix_installation_method == 'user'

- name: Set up channels configuration for local repository
  include_tasks: configure_channels.yml
  when: install_user_guix or guix_installation_method == 'user'

- name: Verify user Guix installation
  shell: |
    export PATH="{{ guix_current_dir }}/bin:{{ ansible_env.PATH }}"
    . "{{ guix_current_dir }}/etc/profile"
    hash -r
    which guix && guix --version && guix describe
  register: guix_verify
  changed_when: false
  failed_when: false
  when: install_user_guix or guix_installation_method == 'user'

- name: Display Guix verification results
  debug:
    msg: |
      Guix verification:
      {{ guix_verify.stdout }}
  when: (install_user_guix or guix_installation_method == 'user') and guix_verify.rc == 0

- name: Display Guix verification failure
  debug:
    msg: |
      Guix verification failed:
      stdout: {{ guix_verify.stdout }}
      stderr: {{ guix_verify.stderr }}
  when: (install_user_guix or guix_installation_method == 'user') and guix_verify.rc != 0
