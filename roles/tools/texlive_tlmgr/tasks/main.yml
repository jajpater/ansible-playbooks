- name: Capture user home directory before any privilege changes
  set_fact:
    user_home: "{{ ansible_env.HOME }}"
  when: user_home is not defined

- name: Override texlive_root to use consistent user home
  set_fact:
    texlive_root: "{{ user_home }}/.local/share/texlive"
  when: user_home is defined

- name: Detect TeX Live release year from Dutch mirror (if not provided)
  uri:
    url: "https://ftp.snt.utwente.nl/pub/software/tex/systems/texlive/tlnet/"
    return_content: true
    follow_redirects: all
  register: tl_release_page
  failed_when: false
  when: tl_year is not defined or (tl_year | string) | length == 0

- name: Extract TeX Live version from mirror directory listing
  set_fact:
    tl_detected_year: "{{ (tl_release_page.content | regex_findall('TEXLIVE_(\\d{4})') | first) if (tl_release_page.content | regex_findall('TEXLIVE_(\\d{4})') | length > 0) else None }}"
  when: 
    - tl_year is not defined or (tl_year | string) | length == 0
    - tl_release_page is defined
    - tl_release_page.status == 200
    - tl_release_page.content is defined

- name: Calculate smart fallback year based on TeX Live release cycle
  set_fact:
    tl_fallback_year: >
      {%- set current_year = ansible_date_time.year | int -%}
      {%- set current_month = ansible_date_time.month | int -%}
      {%- if current_month >= 3 -%}
        {{ current_year }}
      {%- else -%}
        {{ current_year - 1 }}
      {%- endif -%}
  when: tl_year is not defined or (tl_year | string) | length == 0

- name: Set tl_year fact from detection or smart fallback
  set_fact:
    tl_year: "{{ tl_detected_year | default(tl_fallback_year) }}"
  when: tl_year is not defined or (tl_year | string) | length == 0

- name: Map architecture to TeX Live bin dir
  set_fact:
    tl_arch: >-
      {%- if ansible_architecture in ['x86_64','amd64'] -%}
      x86_64-linux
      {%- elif ansible_architecture in ['aarch64','arm64'] -%}
      aarch64-linux
      {%- else -%}
      {{ ansible_architecture }}-linux
      {%- endif -%}
    tl_binflag: >-
      {%- if ansible_architecture in ['x86_64','amd64'] -%}
      x86_64-linux
      {%- elif ansible_architecture in ['aarch64','arm64'] -%}
      aarch64-linux
      {%- else -%}
      {{ ansible_architecture }}-linux
      {%- endif -%}

- name: Compute install paths
  set_fact:
    texdir: "{{ texlive_root }}/{{ tl_year }}"
    tlmgr_bin: "{{ texlive_root }}/{{ tl_year }}/bin/{{ tl_arch }}/tlmgr"
    tl_current_dir: "{{ texlive_root }}/current"

- name: Check if TeX Live already installed
  stat:
    path: "{{ tlmgr_bin }}"
  register: tlmgr_stat

- name: Ensure cache dir for installer exists
  file:
    path: "{{ user_home }}/.cache/texlive"
    state: directory
    mode: "0755"

- name: Download install-tl-unx.tar.gz
  get_url:
    url: "https://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz"
    dest: "{{ user_home }}/.cache/texlive/install-tl-unx.tar.gz"
    mode: "0644"
  when: not tlmgr_stat.stat.exists

- name: Unpack installer
  unarchive:
    src: "{{ user_home }}/.cache/texlive/install-tl-unx.tar.gz"
    dest: "{{ user_home }}/.cache/texlive"
    remote_src: true
  when: not tlmgr_stat.stat.exists

- name: Find installer directory
  find:
    paths: "{{ user_home }}/.cache/texlive"
    file_type: directory
    patterns: "install-tl-*"
    recurse: false
  register: installer_dirs
  when: not tlmgr_stat.stat.exists

- name: Set installer path
  set_fact:
    installer_path: "{{ (installer_dirs.files | sort(attribute='mtime', reverse=true) | first).path }}"
  when: not tlmgr_stat.stat.exists

- name: Write TeX Live profile (XDG + year)
  template:
    src: "texlive.profile.j2"
    dest: "{{ installer_path }}/texlive.profile"
    mode: "0644"
  when: not tlmgr_stat.stat.exists

- name: Run TeX Live installer (batch mode)
  command: "./install-tl -profile texlive.profile"
  args:
    chdir: "{{ installer_path }}"
  when: not tlmgr_stat.stat.exists

# post-install config & updates
- name: Set tlmgr repository
  command: "{{ tlmgr_bin }} option repository {{ tlmgr_repo }}"
  changed_when: false

- name: tlmgr update --self --all (optional)
  command: "{{ tlmgr_bin }} update --self --all"
  register: tlmgr_update
  when: texlive_update_after_install | bool
  changed_when: >-
    tlmgr_update.stdout is search('update') or
    tlmgr_update.stdout is search('upgraded') or
    tlmgr_update.stdout is search('installed')

- name: Install collections (if any)
  command: "{{ tlmgr_bin }} install {{ item }}"
  loop: "{{ texlive_collections }}"
  register: tlmgr_coll
  changed_when: "'installed:' in (tlmgr_coll.stdout | default('')) or 'installed:' in (tlmgr_coll.results | map(attribute='stdout') | join('\n'))"
  when: texlive_collections | length > 0

- name: Install extra packages (if any)
  command: "{{ tlmgr_bin }} install {{ item }}"
  loop: "{{ texlive_packages }}"
  register: tlmgr_pkgs
  changed_when: "'installed:' in (tlmgr_pkgs.stdout | default('')) or 'installed:' in (tlmgr_pkgs.results | map(attribute='stdout') | join('\n'))"
  when: texlive_packages | length > 0

- name: Symlink 'current' â†’ installed year dir (for stable PATH)
  file:
    src: "{{ texdir }}"
    dest: "{{ tl_current_dir }}"
    state: link
    force: true

- name: Ensure ~/.config/zsh/rc exists (for PATH snippet)
  file:
    path: "{{ user_home }}/.config/zsh/rc"
    state: directory
    mode: "0755"
  when: texlive_write_profile_snippet | bool

- name: Remove old texlive.zsh (incorrect location)
  file:
    path: "{{ user_home }}/.config/zsh/texlive.zsh"
    state: absent
  when: texlive_write_profile_snippet | bool

- name: Write zsh PATH snippet (uses 'current' symlink)
  copy:
    dest: "{{ user_home }}/.config/zsh/rc/15-texlive.zsh"
    mode: "0644"
    content: |
      # TeX Live (installed by Ansible)
      export PATH="{{ tl_current_dir }}/bin/{{ tl_arch }}:$PATH"
      export MANPATH="{{ tl_current_dir }}/texmf-dist/doc/man:$MANPATH"
      export INFOPATH="{{ tl_current_dir }}/texmf-dist/doc/info:$INFOPATH"
  when: texlive_write_profile_snippet | bool
